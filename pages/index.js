import { getSession, useSession } from 'next-auth/react'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import Feed from '../components/Feed'
import Header from '../components/Header'
import Sidebar from '../components/Sidebar'
import { AnimatePresence } from 'framer-motion'
import Modal from '../components/Modal'
import { useRecoilState } from 'recoil'
import {connectToDatabase} from '../util/mongodb';
import { modalState, modalTypeState } from '../atoms/modalAtom'
import Widgets from '../components/Widgets'

export default function Home({ posts, articles }) {


  const [modalOpen, setModalOpen] = useRecoilState(modalState)
  const [modalType, setModalType] = useRecoilState(modalTypeState);


  const { data: session } = useSession();

  const router = useRouter();
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      // If the user is not authenticated , handle here
      router.push('/home')
    }
  })


  return (
    <div className='bg-[#f3f2ef] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6'>
      <Head>
        <title>Feed | LinkedIn</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://rb.gy/bizvqj" />
      </Head>

      <Header />
      <main className='flex justify-center gap-x-5 px-4 sm:px-12'>
        <div className='flex flex-col md:flex-row gap-5'>
            <Sidebar />
            <Feed posts={posts}/>
      </div>
        <Widgets articles={articles}/>
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType}/>
          )}
        </AnimatePresence>
      </main>
    </div>
  )
}

export async function getServerSideProps(context) {
  // Check if the user is logged in
  const session = await getSession(context)
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: '/home'
      },
    }
  }

  // Get all the posts on SSR
  const { db } = await connectToDatabase();
  const posts = await db
    .collection("posts")
    .find()
    .sort({ timestamp: -1})
    .toArray();



  // Get ads from  Google News API
  const results = await fetch(
    `https://newsapi.org/v2/top-headlines?country=in&apiKey=${process.env.NEWS_API_KEY}`
  ).then((res) => res.json());




  return {
    props: {
      session,
      articles: results.articles,
      posts: posts.map((post) => ({
        _id: post._id.toString(),
        input: post.input,
        photoUrl: post.photoUrl,
        username: post.username,
        email: post.email,
        userImg: post.userImg,
        createdAt: post.createdAt,
      }))
    }
  }
}

